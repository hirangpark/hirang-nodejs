name: Docker Build & Migrate DB & Deploy for EC2

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'staging'
      - 'production'
      - 'preproduction'

jobs:
  build:
    name: Docker Build & Migrate DB & ECR Push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Git Action Started Notification
        run: echo ''
#         uses: mikesprague/teams-incoming-webhook-action@v1
#         with:
#           github-token: ${{ github.token }}
#           webhook-url: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
#           deploy-card: true
#           title: 'Git Action Started'
#           color: 'info'
      - name: Import PGP(gpg) credentials
        run: echo ''
#         run: |
#           echo -e "$PGP_PRIVATE_KEY" | gpg --import
#         env:
#           PGP_PRIVATE_KEY: ${{ secrets.PGP_PRIVATE_KEY }}
      - name: Ckeck GPG Key
        run: echo ''
#         run: |
#           gpg --version
#           gpg --list-key paul@capa.ai
      - name: Install sops
        run: echo ''
#         env:
#           SOPS_VERSION: v3.7.1
#         run: |
#           wget https://github.com/mozilla/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.linux
#           chmod +x ./sops-${SOPS_VERSION}.linux
#           sudo mv ./sops-${SOPS_VERSION}.linux /usr/local/bin/sops
      - name: Configure AWS credentials
        run: echo ''
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-northeast-2
      - name: Login to Amazon ECR
        run: echo ''
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
      - name: Set up Docker Buildx
        run: echo ''
#         uses: docker/setup-buildx-action@v1
      - name: Generate Pem
        run: echo ''
#         env:
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         run: |
#           echo -e "$PEM" > capa-api.pem
#           chmod 400 capa-api.pem
      - name: Decrypt fcm service account json
        run: echo ''
#         env:
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         run: |
#           sops --input-type json --output-type json -d firebase.json.encrypted > firebase.json
      - name: Decrypt fcm service account json(partner)
        run: echo ''
#         env:
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         run: |
#           sops --input-type json --output-type json -d firebase-partner.json.encrypted > firebase-partner.json
      - name: Decrypt development.env file
        run: echo ''
#         if: ${{ github.ref == 'refs/heads/develop' }}
#         run: |
#           sops --input-type dotenv --output-type dotenv -d development.env.encrypted > development.env
      - name: Decrypt staging.env file
        run: echo ''
#         if: ${{ github.ref == 'refs/heads/staging' }}
#         run: |
#           sops --input-type dotenv --output-type dotenv -d staging.env.encrypted > staging.env
      - name: Decrypt preproduction.env file
        run: echo ''
#         if: ${{ github.ref == 'refs/heads/preproduction' }}
#         run: |
#           sops --input-type dotenv --output-type dotenv -d preproduction.env.encrypted > staging.env
      - name: Decrypt production.env file
        run: echo ''
#         if: ${{ github.ref == 'refs/heads/production' }}
#         run: |
#           sops --input-type dotenv --output-type dotenv -d production.env.encrypted > production.env
      - name: Share development.env file with build job
        run: echo ''
#         if: ${{ github.ref == 'refs/heads/develop' }}
#         uses: actions/upload-artifact@v3
#         with:
#           name: dev-env
#           path: development.env

      - name: Share staging.env file with build job
        run: echo ''
#         if: ${{ github.ref == 'refs/heads/staging' }}
#         uses: actions/upload-artifact@v3
#         with:
#           name: staging-env
#           path: staging.env

      - name: Share preproduction.env file with build job
        run: echo ''
#         if: ${{ github.ref == 'refs/heads/preproduction' }}
#         uses: actions/upload-artifact@v3
#         with:
#           name: preproduction-env
#           path: preproduction.env

      - name: Share production.env file with build job
        run: echo ''
#         if: ${{ github.ref == 'refs/heads/production' }}
#         uses: actions/upload-artifact@v3
#         with:
#           name: production-env
#           path: production.env

      - name: development Docker build and push image to Amazon ECR
        run: echo ''
#         uses: docker/build-push-action@v2
#         if: ${{ github.ref == 'refs/heads/develop' }}
#         env:
#           ECR: ${{ steps.login-ecr.outputs.registry }}
#           TAG: ${{ github.sha }}
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         with:
#           context: .
#           file: Dockerfile.develop
#           push: true
#           tags: |
#             ${{env.ECR}}/capa:development
#             ${{env.ECR}}/capa:development-${{env.TAG}}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           build-args: |
#             NODE_ENV=development

      - name: staging Docker build and push image to Amazon ECR
        run: echo ''
#         uses: docker/build-push-action@v2
#         if: ${{ github.ref == 'refs/heads/staging' }}
#         env:
#           ECR: ${{ steps.login-ecr.outputs.registry }}
#           TAG: ${{ github.sha }}
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         with:
#           context: .
#           file: Dockerfile.develop
#           push: true
#           tags: |
#             ${{env.ECR}}/capa:latest
#             ${{env.ECR}}/capa:staging
#             ${{env.ECR}}/capa:staging-${{env.TAG}}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           build-args: |
#             NODE_ENV=staging
      - name: preproduction Docker build and push image to Amazon ECR
        run: echo ''
#         uses: docker/build-push-action@v2
#         if: ${{ github.ref == 'refs/heads/preproduction' }}
#         env:
#           ECR: ${{ steps.login-ecr.outputs.registry }}
#           TAG: ${{ github.sha }}
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         with:
#           context: .
#           file: Dockerfile.production
#           push: true
#           tags: |
#             ${{env.ECR}}/capa:preproduction
#             ${{env.ECR}}/capa:preproduction-${{env.TAG}}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           build-args: |
#             NODE_ENV=staging
      - name: production Docker build and push image to Amazon ECR
        run: echo ''
#         uses: docker/build-push-action@v2
#         if: ${{ github.ref == 'refs/heads/production' }}
#         env:
#           ECR: ${{ steps.login-ecr.outputs.registry }}
#           TAG: ${{ github.sha }}
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         with:
#           context: .
#           file: Dockerfile.production
#           push: true
#           tags: |
#             ${{env.ECR}}/capa:production
#             ${{env.ECR}}/capa:production-${{env.TAG}}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           build-args: |
#             NODE_ENV=production
  deploy:
    needs: build
    if: success()
    name: Deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        run: echo ''
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-northeast-2

      - name: Generate Pem
        run: echo ''
#         env:
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         run: |
#           echo -e "$PEM" > capa-api.pem
#           chmod 400 capa-api.pem
      - name: Deploy Started Notification
        run: echo ''
#         uses: mikesprague/teams-incoming-webhook-action@v1
#         with:
#           github-token: ${{ github.token }}
#           webhook-url: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
#           deploy-card: true
#           title: 'Server Restarted'
#           color: 'info'

      - name: Download dev env file
        if: ${{ github.ref == 'refs/heads/develop' }}
        uses: actions/download-artifact@v3
        with:
          name: dev-env
          
      - name: Download staging env file
        if: ${{ github.ref == 'refs/heads/staging' }}
        uses: actions/download-artifact@v3
        with:
          name: staging-env

      - name: Download preproduction env file
        if: ${{ github.ref == 'refs/heads/preproduction' }}
        uses: actions/download-artifact@v3
        with:
          name: preproduction-env

      - name: Download production env file
        if: ${{ github.ref == 'refs/heads/production' }}
        uses: actions/download-artifact@v3
        with:
          name: production-env

      - name: development run migration
        if: ${{ github.ref == 'refs/heads/develop' }}
        env:
          ENV: development
#         run: |
#           bash ./db_migration.sh up

      - name: staging run migration
        if: ${{ github.ref == 'refs/heads/staging' }}
        env:
          ENV: staging
#         run: |
#           bash ./db_migration.sh up
#       - name: preproduction run migration
#         if: ${{ github.ref == 'refs/heads/preproduction' }}
#         env:
#           ENV: preproduction
# #         run: |
# #           bash ./db_migration.sh up
#       - name: production run migration
#         if: ${{ github.ref == 'refs/heads/production' }}
#         env:
#           ENV: production
#         run: |
#           bash ./db_migration.sh up
#       - name: development Run Deploy Script
#         if: ${{ github.ref == 'refs/heads/develop' }}
#         env:
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         run: |
#           bash ./deploy.sh development
#       - name: staging Run Deploy Script
#         if: ${{ github.ref == 'refs/heads/staging' }}
#         env:
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         run: |
#           bash ./deploy.sh staging
#       - name: preproduction Run Deploy Script
#         if: ${{ github.ref == 'refs/heads/preproduction' }}
#         env:
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         run: |
#           bash ./deploy.sh preproduction
#       - name: production Run Deploy Script
#         if: ${{ github.ref == 'refs/heads/production' }}
#         env:
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         run: |
#           bash ./deploy.sh production
#   success:
#     needs: deploy
#     if: success()
#     name: Deployment Success
#     runs-on: ubuntu-latest

#     steps:
#       - name: Success Notification
#         uses: mikesprague/teams-incoming-webhook-action@v1
#         with:
#           github-token: ${{ github.token }}
#           webhook-url: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
#           deploy-card: true
#           title: 'Deployment Successful'
#           color: 'success'

#   cancelled:
#     needs: [build, deploy]
#     if: cancelled()
#     name: Git Action Cancelled
#     runs-on: ubuntu-latest

#     steps:
#       - name: Cancelled MS Teams Notification
#         uses: mikesprague/teams-incoming-webhook-action@v1
#         with:
#           github-token: ${{ github.token }}
#           webhook-url: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
#           deploy-card: true
#           title: 'Git Action Cancelled'
#           color: 'warning'

#   failure:
#     needs: [build, deploy]
#     if: failure()
#     name: Git Action Failure
#     runs-on: ubuntu-latest

#     steps:
#       - name: Failure MS Teams Notification
#         uses: mikesprague/teams-incoming-webhook-action@v1
#         with:
#           github-token: ${{ github.token }}
#           webhook-url: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
#           deploy-card: true
#           title: 'Git Action Failed'
#           color: 'failure'
